{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\CaseStudyFrontend\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport jsPDF from \"jspdf\";\nimport * as XLSX from \"xlsx\";\nimport { FaFilePdf, FaFileExcel } from \"react-icons/fa\"; // PDF ve Excel ikonlarÄ±\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nconst localizer = momentLocalizer(moment);\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: [],\n      countries: [],\n      subdivisions: [],\n      selectedCountry: 'DE',\n      selectedSubdivision: '',\n      includePublicHolidays: true,\n      includeSchoolHolidays: false\n    };\n\n    this.downloadPDF = () => {\n      const doc = new jsPDF();\n      doc.text(\"Holiday List\", 10, 10);\n      this.state.events.forEach((event, index) => {\n        doc.text(`${index + 1}. ${event.title} - ${event.start.toDateString()} to ${event.end.toDateString()}`, 10, 20 + index * 10);\n      });\n      doc.save(\"holiday.pdf\");\n    };\n\n    this.downloadExcel = () => {\n      const worksheet = XLSX.utils.json_to_sheet(this.state.events.map(event => ({\n        Title: event.title,\n        Start: event.start.toDateString(),\n        End: event.end.toDateString()\n      })));\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Holidays\");\n      XLSX.writeFile(workbook, \"holidays.xlsx\");\n    };\n\n    this.handleCountryChange = async event => {\n      this.setState({\n        selectedSubdivision: ''\n      });\n      const selectedCountry = event.target.value;\n      this.setState({\n        selectedCountry\n      });\n      const subdivisions = await fetchSubdivisions(selectedCountry);\n      this.setState({\n        subdivisions\n      });\n      this.updateEvents(selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    };\n\n    this.handleSubdivisionChange = async event => {\n      const selectedSubdivision = event.target.value;\n      this.setState({\n        selectedSubdivision\n      });\n      this.updateEvents(this.state.selectedCountry, selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    };\n\n    this.handlePublicHolidayTypeChange = async event => {\n      this.state.includePublicHolidays = event.target.checked;\n      this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, event.target.checked, this.state.includeSchoolHolidays);\n    };\n\n    this.handleSchoolHolidayTypeChange = async event => {\n      this.state.includeSchoolHolidays = event.target.checked;\n      this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, event.target.checked);\n    };\n\n    this.updateEvents = async (countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) => {\n      const data = await fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays);\n      const events = data.map(event => ({\n        start: new Date(event.startDate),\n        end: new Date(event.endDate),\n        title: event.name\n      }));\n      this.setState({\n        events\n      });\n      console.log(events);\n    };\n  }\n\n  async componentDidMount() {\n    const countries = await fetchCountries();\n    this.setState({\n      countries\n    });\n    const subdivisions = await fetchSubdivisions(this.state.selectedCountry);\n    this.setState({\n      subdivisions\n    });\n    this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleCountryChange,\n      value: this.state.selectedCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, this.state.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n      key: country.id,\n      value: country.isoCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, country.name))), /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleSubdivisionChange,\n      value: this.state.selectedSubdivision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, \"Select a subdivision\"), this.state.subdivisions.map(subdivision => /*#__PURE__*/React.createElement(\"option\", {\n      key: subdivision.id,\n      value: subdivision.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, subdivision.longName))), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: true,\n      checked: this.includePublicHolidays,\n      onChange: this.handlePublicHolidayTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }), \"Public Holidays\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.includeSchoolHolidays,\n      onChange: this.handleSchoolHolidayTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }), \"School Holidays\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.downloadPDF,\n      className: \"download-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FaFilePdf, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }), \" Download PDF\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.downloadExcel,\n      className: \"download-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FaFileExcel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }), \" Download Excel\")), /*#__PURE__*/React.createElement(Calendar, {\n      localizer: localizer,\n      defaultDate: new Date(),\n      defaultView: \"month\",\n      events: this.state.events,\n      style: {\n        height: \"100vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nasync function fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) {\n  if (!countryIsoCode) return;\n  const response = await fetch('https://localhost:44355/core/api/holiday/getholiday?CountryIsoCode=' + `${countryIsoCode}&ValidFrom=2024-01-01&ValidTo=2025-12-31` + `${includePublicHolidays ? '&HolidayType=0' : ''}` + `${includeSchoolHolidays ? '&HolidayType=1' : ''}` + `${subdivisionCode ? '&SubdivisionCode=' + subdivisionCode : ''}`);\n  const data = await response.json();\n  return data.result;\n}\n\nasync function fetchCountries() {\n  const response = await fetch(`https://localhost:44355/core/api/holiday/getcountry`);\n  const data = await response.json();\n  return data.result;\n}\n\nasync function fetchSubdivisions(countryIsoCode) {\n  const response = await fetch(`https://localhost:44355/core/api/holiday/getsubdivision?CountryIsoCode=${countryIsoCode}`);\n  const data = await response.json();\n  return data.result;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Github/CaseStudyFrontend/src/App.js"],"names":["React","Component","Calendar","momentLocalizer","moment","jsPDF","XLSX","FaFilePdf","FaFileExcel","localizer","App","state","events","countries","subdivisions","selectedCountry","selectedSubdivision","includePublicHolidays","includeSchoolHolidays","downloadPDF","doc","text","forEach","event","index","title","start","toDateString","end","save","downloadExcel","worksheet","utils","json_to_sheet","map","Title","Start","End","workbook","book_new","book_append_sheet","writeFile","handleCountryChange","setState","target","value","fetchSubdivisions","updateEvents","handleSubdivisionChange","handlePublicHolidayTypeChange","checked","handleSchoolHolidayTypeChange","countryIsoCode","subdivisionCode","data","fetchHolidayData","Date","startDate","endDate","name","console","log","componentDidMount","fetchCountries","render","country","id","isoCode","subdivision","code","longName","height","response","fetch","json","result"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport jsPDF from \"jspdf\";\nimport * as XLSX from \"xlsx\";\nimport { FaFilePdf, FaFileExcel } from \"react-icons/fa\"; // PDF ve Excel ikonlarÄ±\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\n\nclass App extends Component {\n    state = {\n        events: [],\n        countries: [],\n        subdivisions: [],\n        selectedCountry: 'DE',\n        selectedSubdivision: '',\n        includePublicHolidays: true,\n        includeSchoolHolidays: false,\n    };\n\n    async componentDidMount() {\n        const countries = await fetchCountries();\n        this.setState({ countries });\n        const subdivisions = await fetchSubdivisions(this.state.selectedCountry);\n        this.setState({ subdivisions });\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    downloadPDF = () => {\n        const doc = new jsPDF();\n        doc.text(\"Holiday List\", 10, 10);\n        this.state.events.forEach((event, index) => {\n            doc.text(`${index + 1}. ${event.title} - ${event.start.toDateString()} to ${event.end.toDateString()}`, 10, 20 + index * 10);\n        });\n        doc.save(\"holiday.pdf\");\n    };\n\n    downloadExcel = () => {\n        const worksheet = XLSX.utils.json_to_sheet(this.state.events.map(event => ({\n            Title: event.title,\n            Start: event.start.toDateString(),\n            End: event.end.toDateString(),\n        })));\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Holidays\");\n        XLSX.writeFile(workbook, \"holidays.xlsx\");\n    };\n\n    handleCountryChange = async (event) => {\n        this.setState({ selectedSubdivision: '' });\n        const selectedCountry = event.target.value;\n        this.setState({ selectedCountry });\n        const subdivisions = await fetchSubdivisions(selectedCountry);\n        this.setState({ subdivisions });\n        this.updateEvents(selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    handleSubdivisionChange = async (event) => {\n        const selectedSubdivision = event.target.value;\n        this.setState({ selectedSubdivision });\n        this.updateEvents(this.state.selectedCountry, selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    handlePublicHolidayTypeChange = async (event) => {\n        this.state.includePublicHolidays = event.target.checked;\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, event.target.checked, this.state.includeSchoolHolidays);\n    }\n\n    handleSchoolHolidayTypeChange = async (event) => {\n        this.state.includeSchoolHolidays = event.target.checked;\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, event.target.checked);\n    }\n\n    updateEvents = async (countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) => {\n        const data = await fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays);\n        const events = data.map(event => ({\n            start: new Date(event.startDate),\n            end: new Date(event.endDate),\n            title: event.name\n        }));\n        this.setState({ events });\n        console.log(events);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <select onChange={this.handleCountryChange} value={this.state.selectedCountry}>\n                    {this.state.countries.map(country => (\n                        <option key={country.id} value={country.isoCode}>\n                            {country.name}\n                        </option>\n                    ))}\n                </select>\n                <select onChange={this.handleSubdivisionChange} value={this.state.selectedSubdivision}>\n                    <option value=\"\">Select a subdivision</option>\n                    {this.state.subdivisions.map(subdivision => (\n                        <option key={subdivision.id} value={subdivision.code}>\n                            {subdivision.longName}\n                        </option>\n                    ))}\n                </select>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        defaultChecked={true}\n                        checked={this.includePublicHolidays}\n                        onChange={this.handlePublicHolidayTypeChange}\n                    />\n                    Public Holidays\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={this.includeSchoolHolidays}\n                        onChange={this.handleSchoolHolidayTypeChange}\n                    />\n                    School Holidays\n                </label>\n\n                {/* PDF ve Excel butonlarÄ± */}\n                <div className=\"button-group\">\n                    <button onClick={this.downloadPDF} className=\"download-button\">\n                        <FaFilePdf /> Download PDF\n                    </button>\n                    <button onClick={this.downloadExcel} className=\"download-button\">\n                        <FaFileExcel /> Download Excel\n                    </button>\n                </div>\n\n                <Calendar\n                    localizer={localizer}\n                    defaultDate={new Date()}\n                    defaultView=\"month\"\n                    events={this.state.events}\n                    style={{ height: \"100vh\" }}\n                />\n            </div>\n        );\n    }\n}\n\nasync function fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) {\n    if (!countryIsoCode) return;\n    const response = await fetch('https://localhost:44355/core/api/holiday/getholiday?CountryIsoCode=' +\n        `${countryIsoCode}&ValidFrom=2024-01-01&ValidTo=2025-12-31` +\n        `${includePublicHolidays ? '&HolidayType=0' : ''}` +\n        `${includeSchoolHolidays ? '&HolidayType=1' : ''}` +\n        `${subdivisionCode ? '&SubdivisionCode=' + subdivisionCode : ''}`);\n    const data = await response.json();\n    return data.result;\n}\n\nasync function fetchCountries() {\n    const response = await fetch(`https://localhost:44355/core/api/holiday/getcountry`);\n    const data = await response.json();\n    return data.result;\n}\n\nasync function fetchSubdivisions(countryIsoCode) {\n    const response = await fetch(`https://localhost:44355/core/api/holiday/getsubdivision?CountryIsoCode=${countryIsoCode}`);\n    const data = await response.json();\n    return data.result;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}