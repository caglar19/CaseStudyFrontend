{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\CaseStudyFrontend\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport jsPDF from \"jspdf\";\nimport * as XLSX from \"xlsx\";\nimport { FaFilePdf, FaFileExcel } from \"react-icons/fa\"; // PDF ve Excel ikonları\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nconst localizer = momentLocalizer(moment);\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: [],\n      countries: [],\n      subdivisions: [],\n      selectedCountry: 'DE',\n      selectedSubdivision: '',\n      includePublicHolidays: true,\n      includeSchoolHolidays: false\n    };\n\n    this.downloadPDF = () => {\n      const doc = new jsPDF();\n      doc.text(\"Holiday List for 2024\", 10, 10);\n      const events2024 = this.state.events.filter(event => event.start >= new Date(\"2024-01-01\") && event.end <= new Date(\"2024-12-31\"));\n      let y = 20; // Başlangıç yüksekliği\n\n      const lineHeight = 10; // Her satırın yüksekliği\n\n      const pageHeight = doc.internal.pageSize.height; // Sayfa yüksekliği\n\n      const margin = 10; // Sayfa kenar boşluğu\n\n      events2024.forEach((event, index) => {\n        // Yüksekliği kontrol et, sayfa sınırına ulaşıldığında yeni sayfa ekle\n        if (y + lineHeight > pageHeight - margin) {\n          doc.addPage();\n          y = margin; // Yeni sayfada üstten boşluk bırak\n        }\n\n        doc.text(`${index + 1}. ${event.title} - ${event.start.toDateString()} to ${event.end.toDateString()}`, margin, y);\n        y += lineHeight;\n      });\n      doc.save(\"holidays_2024.pdf\");\n    };\n\n    this.downloadExcel = () => {\n      // 2024 yılındaki tüm tatil etkinliklerini filtrele\n      const events2024 = this.state.events.filter(event => event.start >= new Date(\"2024-01-01\") && event.end <= new Date(\"2024-12-31\"));\n      const worksheet = XLSX.utils.json_to_sheet(events2024.map(event => ({\n        Title: event.title,\n        Start: event.start.toDateString(),\n        End: event.end.toDateString()\n      })));\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Holidays_2024\");\n      XLSX.writeFile(workbook, \"holidays_2024.xlsx\");\n    };\n\n    this.handleCountryChange = async event => {\n      this.setState({\n        selectedSubdivision: ''\n      });\n      const selectedCountry = event.target.value;\n      this.setState({\n        selectedCountry\n      });\n      const subdivisions = await fetchSubdivisions(selectedCountry);\n      this.setState({\n        subdivisions\n      });\n      this.updateEvents(selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    };\n\n    this.handleSubdivisionChange = async event => {\n      const selectedSubdivision = event.target.value;\n      this.setState({\n        selectedSubdivision\n      });\n      this.updateEvents(this.state.selectedCountry, selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    };\n\n    this.handlePublicHolidayTypeChange = async event => {\n      this.state.includePublicHolidays = event.target.checked;\n      this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, event.target.checked, this.state.includeSchoolHolidays);\n    };\n\n    this.handleSchoolHolidayTypeChange = async event => {\n      this.state.includeSchoolHolidays = event.target.checked;\n      this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, event.target.checked);\n    };\n\n    this.updateEvents = async (countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) => {\n      const data = await fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays);\n      const events = data.map(event => ({\n        start: new Date(event.startDate),\n        end: new Date(event.endDate),\n        title: event.name\n      }));\n      this.setState({\n        events\n      });\n      console.log(events);\n    };\n  }\n\n  async componentDidMount() {\n    const countries = await fetchCountries();\n    this.setState({\n      countries\n    });\n    const subdivisions = await fetchSubdivisions(this.state.selectedCountry);\n    this.setState({\n      subdivisions\n    });\n    this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleCountryChange,\n      value: this.state.selectedCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, this.state.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n      key: country.id,\n      value: country.isoCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, country.name))), /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleSubdivisionChange,\n      value: this.state.selectedSubdivision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, \"Select a subdivision\"), this.state.subdivisions.map(subdivision => /*#__PURE__*/React.createElement(\"option\", {\n      key: subdivision.id,\n      value: subdivision.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, subdivision.longName))), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: true,\n      checked: this.includePublicHolidays,\n      onChange: this.handlePublicHolidayTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }), \"Public Holidays\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.includeSchoolHolidays,\n      onChange: this.handleSchoolHolidayTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }), \"School Holidays\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.downloadPDF,\n      className: \"download-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FaFilePdf, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }), \" Download PDF\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.downloadExcel,\n      className: \"download-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FaFileExcel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }), \" Download Excel\")), /*#__PURE__*/React.createElement(Calendar, {\n      localizer: localizer,\n      defaultDate: new Date(),\n      defaultView: \"month\",\n      events: this.state.events,\n      style: {\n        height: \"100vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nasync function fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) {\n  if (!countryIsoCode) return;\n  const response = await fetch('https://localhost:44355/core/api/holiday/getholiday?CountryIsoCode=' + `${countryIsoCode}&ValidFrom=2024-01-01&ValidTo=2025-12-31` + `${includePublicHolidays ? '&HolidayType=0' : ''}` + `${includeSchoolHolidays ? '&HolidayType=1' : ''}` + `${subdivisionCode ? '&SubdivisionCode=' + subdivisionCode : ''}`);\n  const data = await response.json();\n  return data.result;\n}\n\nasync function fetchCountries() {\n  const response = await fetch(`https://localhost:44355/core/api/holiday/getcountry`);\n  const data = await response.json();\n  return data.result;\n}\n\nasync function fetchSubdivisions(countryIsoCode) {\n  const response = await fetch(`https://localhost:44355/core/api/holiday/getsubdivision?CountryIsoCode=${countryIsoCode}`);\n  const data = await response.json();\n  return data.result;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Github/CaseStudyFrontend/src/App.js"],"names":["React","Component","Calendar","momentLocalizer","moment","jsPDF","XLSX","FaFilePdf","FaFileExcel","localizer","App","state","events","countries","subdivisions","selectedCountry","selectedSubdivision","includePublicHolidays","includeSchoolHolidays","downloadPDF","doc","text","events2024","filter","event","start","Date","end","y","lineHeight","pageHeight","internal","pageSize","height","margin","forEach","index","addPage","title","toDateString","save","downloadExcel","worksheet","utils","json_to_sheet","map","Title","Start","End","workbook","book_new","book_append_sheet","writeFile","handleCountryChange","setState","target","value","fetchSubdivisions","updateEvents","handleSubdivisionChange","handlePublicHolidayTypeChange","checked","handleSchoolHolidayTypeChange","countryIsoCode","subdivisionCode","data","fetchHolidayData","startDate","endDate","name","console","log","componentDidMount","fetchCountries","render","country","id","isoCode","subdivision","code","longName","response","fetch","json","result"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport jsPDF from \"jspdf\";\nimport * as XLSX from \"xlsx\";\nimport { FaFilePdf, FaFileExcel } from \"react-icons/fa\"; // PDF ve Excel ikonları\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\n\nclass App extends Component {\n    state = {\n        events: [],\n        countries: [],\n        subdivisions: [],\n        selectedCountry: 'DE',\n        selectedSubdivision: '',\n        includePublicHolidays: true,\n        includeSchoolHolidays: false,\n    };\n\n    async componentDidMount() {\n        const countries = await fetchCountries();\n        this.setState({ countries });\n        const subdivisions = await fetchSubdivisions(this.state.selectedCountry);\n        this.setState({ subdivisions });\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    downloadPDF = () => {\n        const doc = new jsPDF();\n        doc.text(\"Holiday List for 2024\", 10, 10);\n    \n        const events2024 = this.state.events.filter(event => \n            event.start >= new Date(\"2024-01-01\") && event.end <= new Date(\"2024-12-31\")\n        );\n    \n        let y = 20; // Başlangıç yüksekliği\n        const lineHeight = 10; // Her satırın yüksekliği\n        const pageHeight = doc.internal.pageSize.height; // Sayfa yüksekliği\n        const margin = 10; // Sayfa kenar boşluğu\n    \n        events2024.forEach((event, index) => {\n            // Yüksekliği kontrol et, sayfa sınırına ulaşıldığında yeni sayfa ekle\n            if (y + lineHeight > pageHeight - margin) {\n                doc.addPage();\n                y = margin; // Yeni sayfada üstten boşluk bırak\n            }\n            doc.text(\n                `${index + 1}. ${event.title} - ${event.start.toDateString()} to ${event.end.toDateString()}`,\n                margin,\n                y\n            );\n            y += lineHeight;\n        });\n    \n        doc.save(\"holidays_2024.pdf\");\n    };\n    \n    \n    downloadExcel = () => {\n        // 2024 yılındaki tüm tatil etkinliklerini filtrele\n        const events2024 = this.state.events.filter(event => \n            event.start >= new Date(\"2024-01-01\") && event.end <= new Date(\"2024-12-31\")\n        );\n    \n        const worksheet = XLSX.utils.json_to_sheet(events2024.map(event => ({\n            Title: event.title,\n            Start: event.start.toDateString(),\n            End: event.end.toDateString(),\n        })));\n        const workbook = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Holidays_2024\");\n        XLSX.writeFile(workbook, \"holidays_2024.xlsx\");\n    };\n    \n    \n\n    handleCountryChange = async (event) => {\n        this.setState({ selectedSubdivision: '' });\n        const selectedCountry = event.target.value;\n        this.setState({ selectedCountry });\n        const subdivisions = await fetchSubdivisions(selectedCountry);\n        this.setState({ subdivisions });\n        this.updateEvents(selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    handleSubdivisionChange = async (event) => {\n        const selectedSubdivision = event.target.value;\n        this.setState({ selectedSubdivision });\n        this.updateEvents(this.state.selectedCountry, selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    handlePublicHolidayTypeChange = async (event) => {\n        this.state.includePublicHolidays = event.target.checked;\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, event.target.checked, this.state.includeSchoolHolidays);\n    }\n\n    handleSchoolHolidayTypeChange = async (event) => {\n        this.state.includeSchoolHolidays = event.target.checked;\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, event.target.checked);\n    }\n\n    updateEvents = async (countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) => {\n        const data = await fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays);\n        const events = data.map(event => ({\n            start: new Date(event.startDate),\n            end: new Date(event.endDate),\n            title: event.name\n        }));\n        this.setState({ events });\n        console.log(events);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <select onChange={this.handleCountryChange} value={this.state.selectedCountry}>\n                    {this.state.countries.map(country => (\n                        <option key={country.id} value={country.isoCode}>\n                            {country.name}\n                        </option>\n                    ))}\n                </select>\n                <select onChange={this.handleSubdivisionChange} value={this.state.selectedSubdivision}>\n                    <option value=\"\">Select a subdivision</option>\n                    {this.state.subdivisions.map(subdivision => (\n                        <option key={subdivision.id} value={subdivision.code}>\n                            {subdivision.longName}\n                        </option>\n                    ))}\n                </select>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        defaultChecked={true}\n                        checked={this.includePublicHolidays}\n                        onChange={this.handlePublicHolidayTypeChange}\n                    />\n                    Public Holidays\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={this.includeSchoolHolidays}\n                        onChange={this.handleSchoolHolidayTypeChange}\n                    />\n                    School Holidays\n                </label>\n\n                {/* PDF ve Excel butonları */}\n                <div className=\"button-group\">\n                    <button onClick={this.downloadPDF} className=\"download-button\">\n                        <FaFilePdf /> Download PDF\n                    </button>\n                    <button onClick={this.downloadExcel} className=\"download-button\">\n                        <FaFileExcel /> Download Excel\n                    </button>\n                </div>\n\n                <Calendar\n                    localizer={localizer}\n                    defaultDate={new Date()}\n                    defaultView=\"month\"\n                    events={this.state.events}\n                    style={{ height: \"100vh\" }}\n                />\n            </div>\n        );\n    }\n}\n\nasync function fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) {\n    if (!countryIsoCode) return;\n    const response = await fetch('https://localhost:44355/core/api/holiday/getholiday?CountryIsoCode=' +\n        `${countryIsoCode}&ValidFrom=2024-01-01&ValidTo=2025-12-31` +\n        `${includePublicHolidays ? '&HolidayType=0' : ''}` +\n        `${includeSchoolHolidays ? '&HolidayType=1' : ''}` +\n        `${subdivisionCode ? '&SubdivisionCode=' + subdivisionCode : ''}`);\n    const data = await response.json();\n    return data.result;\n}\n\nasync function fetchCountries() {\n    const response = await fetch(`https://localhost:44355/core/api/holiday/getcountry`);\n    const data = await response.json();\n    return data.result;\n}\n\nasync function fetchSubdivisions(countryIsoCode) {\n    const response = await fetch(`https://localhost:44355/core/api/holiday/getsubdivision?CountryIsoCode=${countryIsoCode}`);\n    const data = await response.json();\n    return data.result;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}