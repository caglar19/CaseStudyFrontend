{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\CaseStudyFrontend\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nconst localizer = momentLocalizer(moment);\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: [],\n      countries: [],\n      subdivisions: [],\n      selectedCountry: 'DE',\n      selectedSubdivision: '',\n      includePublicHolidays: true,\n      includeSchoolHolidays: false\n    };\n\n    this.handleCountryChange = async event => {\n      this.setState({\n        selectedSubdivision: ''\n      });\n      const selectedCountry = event.target.value;\n      this.setState({\n        selectedCountry\n      });\n      const subdivisions = await fetchSubdivisions(selectedCountry);\n      this.setState({\n        subdivisions\n      });\n      this.updateEvents(selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    };\n\n    this.handleSubdivisionChange = async event => {\n      const selectedSubdivision = event.target.value;\n      this.setState({\n        selectedSubdivision\n      });\n      this.updateEvents(this.state.selectedCountry, selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    };\n\n    this.handlePublicHolidayTypeChange = async event => {\n      this.state.includePublicHolidays = event.target.checked;\n      this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, event.target.checked, this.state.includeSchoolHolidays);\n    };\n\n    this.handleSchoolHolidayTypeChange = async event => {\n      this.state.includeSchoolHolidays = event.target.checked;\n      this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, event.target.checked);\n    };\n\n    this.updateEvents = async (countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) => {\n      const data = await fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays);\n      const events = data.map(event => ({\n        start: new Date(event.startDate),\n        end: new Date(event.endDate),\n        title: event.name\n      }));\n      this.setState({\n        events\n      });\n      console.log(events);\n    };\n  }\n\n  async componentDidMount() {\n    const countries = await fetchCountries();\n    this.setState({\n      countries\n    });\n    const subdivisions = await fetchSubdivisions(this.state.selectedCountry);\n    this.setState({\n      subdivisions\n    });\n    this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleCountryChange,\n      value: this.state.selectedCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, this.state.countries.map(country => /*#__PURE__*/React.createElement(\"option\", {\n      key: country.id,\n      value: country.isoCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, country.name))), /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleSubdivisionChange,\n      value: this.state.selectedSubdivision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, \"Select a subdivision\"), this.state.subdivisions.map(subdivision => /*#__PURE__*/React.createElement(\"option\", {\n      key: subdivision.id,\n      value: subdivision.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, subdivision.longName))), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: true,\n      checked: this.includePublicHolidays,\n      onChange: this.handlePublicHolidayTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }), \"Public Holidays\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.includeSchoolHolidays,\n      onChange: this.handleSchoolHolidayTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }), \"School Holidays\"), /*#__PURE__*/React.createElement(Calendar, {\n      localizer: localizer,\n      defaultDate: new Date(),\n      defaultView: \"month\",\n      events: this.state.events,\n      style: {\n        height: \"100vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nasync function fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) {\n  if (!countryIsoCode) return;\n  const response = await fetch('https://localhost:44355/core/api/holiday/getholiday?CountryIsoCode=' + `${countryIsoCode}&ValidFrom=2024-01-01&ValidTo=2025-12-31` + `${includePublicHolidays ? '&HolidayType=0' : ''}` + `${includeSchoolHolidays ? '&HolidayType=1' : ''}` + `${subdivisionCode ? '&SubdivisionCode=' + subdivisionCode : ''}`);\n  const data = await response.json();\n  return data.result;\n}\n\nasync function fetchCountries() {\n  const response = await fetch(`https://localhost:44355/core/api/holiday/getcountry`);\n  const data = await response.json();\n  return data.result;\n}\n\nasync function fetchSubdivisions(countryIsoCode) {\n  const response = await fetch(`https://localhost:44355/core/api/holiday/getsubdivision?CountryIsoCode=${countryIsoCode}`);\n  const data = await response.json();\n  return data.result;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Github/CaseStudyFrontend/src/App.js"],"names":["React","Component","Calendar","momentLocalizer","moment","localizer","App","state","events","countries","subdivisions","selectedCountry","selectedSubdivision","includePublicHolidays","includeSchoolHolidays","handleCountryChange","event","setState","target","value","fetchSubdivisions","updateEvents","handleSubdivisionChange","handlePublicHolidayTypeChange","checked","handleSchoolHolidayTypeChange","countryIsoCode","subdivisionCode","data","fetchHolidayData","map","start","Date","startDate","end","endDate","title","name","console","log","componentDidMount","fetchCountries","render","country","id","isoCode","subdivision","code","longName","height","response","fetch","json","result"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\n\n\nclass App extends Component {\n    state = {\n        events: [],\n        countries: [],\n        subdivisions: [],\n        selectedCountry: 'DE',\n        selectedSubdivision: '',\n        includePublicHolidays: true,\n        includeSchoolHolidays: false,\n    };\n\n    async componentDidMount() {\n        const countries = await fetchCountries();\n        this.setState({ countries });\n        const subdivisions = await fetchSubdivisions(this.state.selectedCountry);\n        this.setState({ subdivisions });\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    handleCountryChange = async (event) => {\n        this.setState({ selectedSubdivision :''})\n        const selectedCountry = event.target.value;\n        this.setState({ selectedCountry });\n        const subdivisions = await fetchSubdivisions(selectedCountry);\n        this.setState({ subdivisions });\n\n        this.updateEvents(selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    handleSubdivisionChange = async (event) => {\n        const selectedSubdivision = event.target.value;\n        this.setState({ selectedSubdivision });\n        this.updateEvents(this.state.selectedCountry, selectedSubdivision, this.state.includePublicHolidays, this.state.includeSchoolHolidays);\n    }\n\n    handlePublicHolidayTypeChange = async (event) => {\n        this.state.includePublicHolidays = event.target.checked;\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, event.target.checked, this.state.includeSchoolHolidays);\n    }\n\n    handleSchoolHolidayTypeChange = async (event) => {\n        this.state.includeSchoolHolidays = event.target.checked;\n        this.updateEvents(this.state.selectedCountry, this.state.selectedSubdivision, this.state.includePublicHolidays, event.target.checked);\n    }\n\n    updateEvents = async (countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) => {\n        const data = await fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays);\n        const events = data.map(event => ({\n            start: new Date(event.startDate),\n            end: new Date(event.endDate),\n            title: event.name\n        }));\n        this.setState({ events });\n        console.log(events);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <select onChange={this.handleCountryChange} value={this.state.selectedCountry}>\n                    {this.state.countries.map(country => (\n                        <option key={country.id} value={country.isoCode}>\n                            {country.name}\n                        </option>\n                    ))}\n                </select>\n                <select onChange={this.handleSubdivisionChange} value={this.state.selectedSubdivision}>\n                    <option value=\"\">Select a subdivision</option>\n                    {this.state.subdivisions.map(subdivision => (\n                        <option key={subdivision.id} value={subdivision.code}>\n                            {subdivision.longName}\n                        </option>\n                    ))}\n                </select>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        defaultChecked={true}\n                        checked={this.includePublicHolidays}\n                        onChange={this.handlePublicHolidayTypeChange}\n                    />\n                    Public Holidays\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={this.includeSchoolHolidays}\n                        onChange={this.handleSchoolHolidayTypeChange}\n                    />\n                    School Holidays\n                </label>\n                <Calendar\n                    localizer={localizer}\n                    defaultDate={new Date()}\n                    defaultView=\"month\"\n                    events={this.state.events}\n                    style={{ height: \"100vh\" }}\n                />\n            </div>\n        );\n    }\n}\n\nasync function fetchHolidayData(countryIsoCode, subdivisionCode, includePublicHolidays, includeSchoolHolidays) {\n    if (!countryIsoCode) return;\n    const response = await fetch('https://localhost:44355/core/api/holiday/getholiday?CountryIsoCode=' +\n        `${countryIsoCode}&ValidFrom=2024-01-01&ValidTo=2025-12-31` +\n        `${includePublicHolidays ? '&HolidayType=0' : ''}` +\n        `${includeSchoolHolidays ? '&HolidayType=1' : ''}` +\n        `${subdivisionCode ? '&SubdivisionCode=' + subdivisionCode : ''}`);\n    const data = await response.json();\n    return data.result;\n}\n\nasync function fetchCountries() {\n    const response = await fetch(`https://localhost:44355/core/api/holiday/getcountry`);\n    const data = await response.json();\n    return data.result;\n}\n\nasync function fetchSubdivisions(countryIsoCode) {\n    const response = await fetch(`https://localhost:44355/core/api/holiday/getsubdivision?CountryIsoCode=${countryIsoCode}`);\n    const data = await response.json();\n    return data.result;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}